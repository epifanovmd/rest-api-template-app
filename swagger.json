{
	"components": {
		"examples": {},
		"headers": {},
		"parameters": {},
		"requestBodies": {},
		"responses": {},
		"schemas": {
			"EPermissions": {
				"enum": [
					"read",
					"write",
					"delete"
				],
				"type": "string"
			},
			"Pick_PermissionModel.Exclude_keyofPermissionModel.passwordHash__": {
				"properties": {
					"id": {
						"type": "string"
					},
					"createdAt": {
						"type": "string",
						"format": "date-time"
					},
					"updatedAt": {
						"type": "string",
						"format": "date-time"
					},
					"name": {
						"$ref": "#/components/schemas/EPermissions"
					}
				},
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"IPermissionDto": {
				"properties": {
					"id": {
						"type": "string"
					},
					"createdAt": {
						"type": "string",
						"format": "date-time"
					},
					"updatedAt": {
						"type": "string",
						"format": "date-time"
					},
					"name": {
						"$ref": "#/components/schemas/EPermissions"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"ERole": {
				"enum": [
					"admin",
					"user",
					"guest"
				],
				"type": "string"
			},
			"InferAttributes_Role_": {
				"properties": {
					"permissions": {
						"items": {
							"$ref": "#/components/schemas/IPermissionDto"
						},
						"type": "array"
					},
					"id": {
						"type": "string"
					},
					"name": {
						"$ref": "#/components/schemas/ERole"
					},
					"createdAt": {
						"type": "string",
						"format": "date-time"
					},
					"updatedAt": {
						"type": "string",
						"format": "date-time"
					}
				},
				"required": [
					"permissions"
				],
				"type": "object",
				"description": "Utility type to extract Attributes of a given Model class.\n\nIt returns all instance properties defined in the Model, except:\n- those inherited from Model (intermediate inheritance works),\n- the ones whose type is a function,\n- the ones manually excluded using the second parameter.\n- the ones branded using {@link NonAttribute}\n\nIt cannot detect whether something is a getter or not, you should use the `Excluded`\nparameter to exclude getter & setters from the attribute list."
			},
			"IRoleDto": {
				"properties": {
					"permissions": {
						"items": {
							"$ref": "#/components/schemas/IPermissionDto"
						},
						"type": "array"
					},
					"id": {
						"type": "string"
					},
					"name": {
						"$ref": "#/components/schemas/ERole"
					},
					"createdAt": {
						"type": "string",
						"format": "date-time"
					},
					"updatedAt": {
						"type": "string",
						"format": "date-time"
					}
				},
				"required": [
					"permissions"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Pick_ProfileModel.Exclude_keyofProfileModel.passwordHash__": {
				"properties": {
					"id": {
						"type": "string"
					},
					"firstName": {
						"type": "string"
					},
					"lastName": {
						"type": "string"
					},
					"email": {
						"type": "string"
					},
					"emailVerified": {
						"type": "boolean"
					},
					"phone": {
						"type": "string"
					},
					"roleId": {
						"type": "string"
					},
					"challenge": {
						"type": "string"
					},
					"createdAt": {
						"type": "string",
						"format": "date-time"
					},
					"updatedAt": {
						"type": "string",
						"format": "date-time"
					}
				},
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"IProfileDto": {
				"properties": {
					"id": {
						"type": "string"
					},
					"firstName": {
						"type": "string"
					},
					"lastName": {
						"type": "string"
					},
					"email": {
						"type": "string"
					},
					"emailVerified": {
						"type": "boolean"
					},
					"phone": {
						"type": "string"
					},
					"roleId": {
						"type": "string"
					},
					"challenge": {
						"type": "string"
					},
					"createdAt": {
						"type": "string",
						"format": "date-time"
					},
					"updatedAt": {
						"type": "string",
						"format": "date-time"
					},
					"role": {
						"$ref": "#/components/schemas/IRoleDto"
					}
				},
				"required": [
					"role"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Pick_TProfileCreateModel.Exclude_keyofTProfileCreateModel.id-or-passwordHash__": {
				"properties": {
					"firstName": {
						"type": "string"
					},
					"lastName": {
						"type": "string"
					},
					"email": {
						"type": "string"
					},
					"phone": {
						"type": "string"
					},
					"roleId": {
						"type": "string"
					},
					"challenge": {
						"type": "string"
					}
				},
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"IProfileUpdateRequest": {
				"properties": {
					"firstName": {
						"type": "string"
					},
					"lastName": {
						"type": "string"
					},
					"email": {
						"type": "string"
					},
					"phone": {
						"type": "string"
					},
					"roleId": {
						"type": "string"
					},
					"challenge": {
						"type": "string"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"IProfileListDto": {
				"properties": {
					"count": {
						"type": "number",
						"format": "double"
					},
					"offset": {
						"type": "number",
						"format": "double"
					},
					"limit": {
						"type": "number",
						"format": "double"
					},
					"data": {
						"items": {
							"$ref": "#/components/schemas/IProfileDto"
						},
						"type": "array"
					}
				},
				"required": [
					"data"
				],
				"type": "object",
				"additionalProperties": false
			},
			"IProfilePrivilegesRequest": {
				"properties": {
					"roleName": {
						"$ref": "#/components/schemas/ERole"
					},
					"permissions": {
						"items": {
							"$ref": "#/components/schemas/EPermissions"
						},
						"type": "array"
					}
				},
				"required": [
					"roleName",
					"permissions"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ApiResponse": {
				"properties": {
					"message": {
						"type": "string"
					},
					"data": {}
				},
				"type": "object",
				"additionalProperties": false
			},
			"IProfilePassword": {
				"properties": {
					"password": {
						"type": "string"
					}
				},
				"required": [
					"password"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ITokensDto": {
				"properties": {
					"accessToken": {
						"type": "string"
					},
					"refreshToken": {
						"type": "string"
					}
				},
				"required": [
					"accessToken",
					"refreshToken"
				],
				"type": "object",
				"additionalProperties": false
			},
			"IProfileWithTokensDto": {
				"properties": {
					"id": {
						"type": "string"
					},
					"firstName": {
						"type": "string"
					},
					"lastName": {
						"type": "string"
					},
					"email": {
						"type": "string"
					},
					"emailVerified": {
						"type": "boolean"
					},
					"phone": {
						"type": "string"
					},
					"roleId": {
						"type": "string"
					},
					"challenge": {
						"type": "string"
					},
					"createdAt": {
						"type": "string",
						"format": "date-time"
					},
					"updatedAt": {
						"type": "string",
						"format": "date-time"
					},
					"role": {
						"$ref": "#/components/schemas/IRoleDto"
					},
					"tokens": {
						"$ref": "#/components/schemas/ITokensDto"
					}
				},
				"required": [
					"role",
					"tokens"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Pick_TProfileCreateModel.Exclude_keyofTProfileCreateModel.passwordHash-or-roleId-or-challenge__": {
				"properties": {
					"firstName": {
						"type": "string"
					},
					"lastName": {
						"type": "string"
					},
					"email": {
						"type": "string"
					},
					"phone": {
						"type": "string"
					}
				},
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"ISignUpRequest": {
				"properties": {
					"firstName": {
						"type": "string"
					},
					"lastName": {
						"type": "string"
					},
					"email": {
						"type": "string"
					},
					"phone": {
						"type": "string"
					},
					"password": {
						"type": "string"
					}
				},
				"required": [
					"password"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ISignInRequest": {
				"properties": {
					"login": {
						"type": "string",
						"description": "Может быть телефоном, email-ом и username-ом"
					},
					"password": {
						"type": "string"
					}
				},
				"required": [
					"login",
					"password"
				],
				"type": "object",
				"additionalProperties": false
			},
			"IProfileLogin": {
				"properties": {
					"login": {
						"type": "string",
						"description": "Может быть телефоном, email-ом и username-ом"
					}
				},
				"required": [
					"login"
				],
				"type": "object",
				"additionalProperties": false
			},
			"IProfileResetPasswordRequest": {
				"properties": {
					"password": {
						"type": "string"
					},
					"token": {
						"type": "string"
					}
				},
				"required": [
					"password",
					"token"
				],
				"type": "object",
				"additionalProperties": false
			},
			"InferAttributes_Files_": {
				"properties": {
					"id": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"type": {
						"type": "string"
					},
					"url": {
						"type": "string"
					},
					"size": {
						"type": "number",
						"format": "double"
					},
					"createdAt": {
						"type": "string",
						"format": "date-time"
					},
					"updatedAt": {
						"type": "string",
						"format": "date-time"
					}
				},
				"type": "object",
				"description": "Utility type to extract Attributes of a given Model class.\n\nIt returns all instance properties defined in the Model, except:\n- those inherited from Model (intermediate inheritance works),\n- the ones whose type is a function,\n- the ones manually excluded using the second parameter.\n- the ones branded using {@link NonAttribute}\n\nIt cannot detect whether something is a getter or not, you should use the `Excluded`\nparameter to exclude getter & setters from the attribute list."
			},
			"IFileDto": {
				"properties": {
					"id": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"type": {
						"type": "string"
					},
					"url": {
						"type": "string"
					},
					"size": {
						"type": "number",
						"format": "double"
					},
					"createdAt": {
						"type": "string",
						"format": "date-time"
					},
					"updatedAt": {
						"type": "string",
						"format": "date-time"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"Base64URLString": {
				"type": "string",
				"description": "An attempt to communicate that this isn't just any string, but a Base64URL-encoded string"
			},
			"PublicKeyCredentialType": {
				"type": "string",
				"enum": [
					"public-key"
				],
				"nullable": false
			},
			"AuthenticatorTransportFuture": {
				"type": "string",
				"enum": [
					"ble",
					"cable",
					"hybrid",
					"internal",
					"nfc",
					"smart-card",
					"usb"
				],
				"description": "A super class of TypeScript's `AuthenticatorTransport` that includes support for the latest\ntransports. Should eventually be replaced by TypeScript's when TypeScript gets updated to\nknow about it (sometime after 4.6.3)"
			},
			"PublicKeyCredentialDescriptorJSON": {
				"description": "https://w3c.github.io/webauthn/#dictdef-publickeycredentialdescriptorjson",
				"properties": {
					"id": {
						"$ref": "#/components/schemas/Base64URLString"
					},
					"type": {
						"$ref": "#/components/schemas/PublicKeyCredentialType"
					},
					"transports": {
						"items": {
							"$ref": "#/components/schemas/AuthenticatorTransportFuture"
						},
						"type": "array"
					}
				},
				"required": [
					"id",
					"type"
				],
				"type": "object",
				"additionalProperties": false
			},
			"UserVerificationRequirement": {
				"type": "string",
				"enum": [
					"discouraged",
					"preferred",
					"required"
				]
			},
			"AuthenticationExtensionsClientInputs": {
				"properties": {
					"appid": {
						"type": "string"
					},
					"credProps": {
						"type": "boolean"
					},
					"hmacCreateSecret": {
						"type": "boolean"
					},
					"minPinLength": {
						"type": "boolean"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"PublicKeyCredentialRequestOptionsJSON": {
				"description": "A variant of PublicKeyCredentialRequestOptions suitable for JSON transmission to the browser to\n(eventually) get passed into navigator.credentials.get(...) in the browser.",
				"properties": {
					"challenge": {
						"$ref": "#/components/schemas/Base64URLString"
					},
					"timeout": {
						"type": "number",
						"format": "double"
					},
					"rpId": {
						"type": "string"
					},
					"allowCredentials": {
						"items": {
							"$ref": "#/components/schemas/PublicKeyCredentialDescriptorJSON"
						},
						"type": "array"
					},
					"userVerification": {
						"$ref": "#/components/schemas/UserVerificationRequirement"
					},
					"extensions": {
						"$ref": "#/components/schemas/AuthenticationExtensionsClientInputs"
					}
				},
				"required": [
					"challenge"
				],
				"type": "object",
				"additionalProperties": false
			},
			"COSEAlgorithmIdentifier": {
				"type": "number",
				"format": "double"
			},
			"AuthenticatorAttestationResponseJSON": {
				"description": "A slightly-modified AuthenticatorAttestationResponse to simplify working with ArrayBuffers that\nare Base64URL-encoded in the browser so that they can be sent as JSON to the server.\n\nhttps://w3c.github.io/webauthn/#dictdef-authenticatorattestationresponsejson",
				"properties": {
					"clientDataJSON": {
						"$ref": "#/components/schemas/Base64URLString"
					},
					"attestationObject": {
						"$ref": "#/components/schemas/Base64URLString"
					},
					"authenticatorData": {
						"$ref": "#/components/schemas/Base64URLString"
					},
					"transports": {
						"items": {
							"$ref": "#/components/schemas/AuthenticatorTransportFuture"
						},
						"type": "array"
					},
					"publicKeyAlgorithm": {
						"$ref": "#/components/schemas/COSEAlgorithmIdentifier"
					},
					"publicKey": {
						"$ref": "#/components/schemas/Base64URLString"
					}
				},
				"required": [
					"clientDataJSON",
					"attestationObject"
				],
				"type": "object",
				"additionalProperties": false
			},
			"AuthenticatorAttachment": {
				"type": "string",
				"enum": [
					"cross-platform",
					"platform"
				]
			},
			"CredentialPropertiesOutput": {
				"properties": {
					"rk": {
						"type": "boolean"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"AuthenticationExtensionsClientOutputs": {
				"properties": {
					"appid": {
						"type": "boolean"
					},
					"credProps": {
						"$ref": "#/components/schemas/CredentialPropertiesOutput"
					},
					"hmacCreateSecret": {
						"type": "boolean"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"RegistrationResponseJSON": {
				"description": "A slightly-modified RegistrationCredential to simplify working with ArrayBuffers that\nare Base64URL-encoded in the browser so that they can be sent as JSON to the server.\n\nhttps://w3c.github.io/webauthn/#dictdef-registrationresponsejson",
				"properties": {
					"id": {
						"$ref": "#/components/schemas/Base64URLString"
					},
					"rawId": {
						"$ref": "#/components/schemas/Base64URLString"
					},
					"response": {
						"$ref": "#/components/schemas/AuthenticatorAttestationResponseJSON"
					},
					"authenticatorAttachment": {
						"$ref": "#/components/schemas/AuthenticatorAttachment"
					},
					"clientExtensionResults": {
						"$ref": "#/components/schemas/AuthenticationExtensionsClientOutputs"
					},
					"type": {
						"$ref": "#/components/schemas/PublicKeyCredentialType"
					}
				},
				"required": [
					"id",
					"rawId",
					"response",
					"clientExtensionResults",
					"type"
				],
				"type": "object",
				"additionalProperties": false
			},
			"IVerifyRegistrationRequest": {
				"properties": {
					"profileId": {
						"type": "string"
					},
					"data": {
						"$ref": "#/components/schemas/RegistrationResponseJSON"
					}
				},
				"required": [
					"profileId",
					"data"
				],
				"type": "object",
				"additionalProperties": false
			},
			"IVerifyAuthenticationResponse": {
				"properties": {
					"verified": {
						"type": "boolean"
					},
					"tokens": {
						"$ref": "#/components/schemas/ITokensDto"
					}
				},
				"required": [
					"verified"
				],
				"type": "object",
				"additionalProperties": false
			},
			"AuthenticatorAssertionResponseJSON": {
				"description": "A slightly-modified AuthenticatorAssertionResponse to simplify working with ArrayBuffers that\nare Base64URL-encoded in the browser so that they can be sent as JSON to the server.\n\nhttps://w3c.github.io/webauthn/#dictdef-authenticatorassertionresponsejson",
				"properties": {
					"clientDataJSON": {
						"$ref": "#/components/schemas/Base64URLString"
					},
					"authenticatorData": {
						"$ref": "#/components/schemas/Base64URLString"
					},
					"signature": {
						"$ref": "#/components/schemas/Base64URLString"
					},
					"userHandle": {
						"$ref": "#/components/schemas/Base64URLString"
					}
				},
				"required": [
					"clientDataJSON",
					"authenticatorData",
					"signature"
				],
				"type": "object",
				"additionalProperties": false
			},
			"AuthenticationResponseJSON": {
				"description": "A slightly-modified AuthenticationCredential to simplify working with ArrayBuffers that\nare Base64URL-encoded in the browser so that they can be sent as JSON to the server.\n\nhttps://w3c.github.io/webauthn/#dictdef-authenticationresponsejson",
				"properties": {
					"id": {
						"$ref": "#/components/schemas/Base64URLString"
					},
					"rawId": {
						"$ref": "#/components/schemas/Base64URLString"
					},
					"response": {
						"$ref": "#/components/schemas/AuthenticatorAssertionResponseJSON"
					},
					"authenticatorAttachment": {
						"$ref": "#/components/schemas/AuthenticatorAttachment"
					},
					"clientExtensionResults": {
						"$ref": "#/components/schemas/AuthenticationExtensionsClientOutputs"
					},
					"type": {
						"$ref": "#/components/schemas/PublicKeyCredentialType"
					}
				},
				"required": [
					"id",
					"rawId",
					"response",
					"clientExtensionResults",
					"type"
				],
				"type": "object",
				"additionalProperties": false
			},
			"IVerifyAuthenticationRequest": {
				"properties": {
					"profileId": {
						"type": "string"
					},
					"data": {
						"$ref": "#/components/schemas/AuthenticationResponseJSON"
					}
				},
				"required": [
					"profileId",
					"data"
				],
				"type": "object",
				"additionalProperties": false
			}
		},
		"securitySchemes": {
			"jwt": {
				"type": "http",
				"scheme": "bearer",
				"bearerFormat": "JWT"
			}
		}
	},
	"info": {
		"title": "rest-api",
		"version": "1.0.0",
		"description": "REST API Template App",
		"license": {
			"name": "MIT"
		},
		"contact": {
			"name": "Epifanov Andrei",
			"email": "epifanovmd@gmail.com"
		}
	},
	"openapi": "3.0.0",
	"paths": {
		"/api/profile/my": {
			"get": {
				"operationId": "GetMyProfile",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/IProfileDto"
								}
							}
						}
					}
				},
				"tags": [
					"Profile"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": []
			}
		},
		"/api/profile/my/update": {
			"patch": {
				"operationId": "UpdateMyProfile",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/IProfileDto"
								}
							}
						}
					}
				},
				"tags": [
					"Profile"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/IProfileUpdateRequest"
							}
						}
					}
				}
			}
		},
		"/api/profile/my/delete": {
			"delete": {
				"operationId": "DeleteMyProfile",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					}
				},
				"tags": [
					"Profile"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": []
			}
		},
		"/api/profile/all": {
			"get": {
				"operationId": "GetAllProfiles",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/IProfileListDto"
								}
							}
						}
					}
				},
				"tags": [
					"Profile"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"in": "query",
						"name": "offset",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "limit",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/api/profile/{id}": {
			"get": {
				"operationId": "GetProfileById",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/IProfileDto"
								}
							}
						}
					}
				},
				"tags": [
					"Profile"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/api/profile/setPrivileges/{id}": {
			"patch": {
				"operationId": "SetPrivileges",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/IProfileDto"
								}
							}
						}
					}
				},
				"tags": [
					"Profile"
				],
				"security": [
					{
						"jwt": [
							"role:admin"
						]
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/IProfilePrivilegesRequest"
							}
						}
					}
				}
			}
		},
		"/api/profile/requestVerifyEmail": {
			"post": {
				"operationId": "RequestVerifyEmail",
				"responses": {
					"204": {
						"description": "No content"
					}
				},
				"tags": [
					"Profile"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": []
			}
		},
		"/api/profile/verifyEmail/{code}": {
			"get": {
				"operationId": "VerifyEmail",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse"
								}
							}
						}
					}
				},
				"tags": [
					"Profile"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "code",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/api/profile/update/{id}": {
			"patch": {
				"operationId": "UpdateProfile",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/IProfileDto"
								}
							}
						}
					}
				},
				"tags": [
					"Profile"
				],
				"security": [
					{
						"jwt": [
							"role:admin"
						]
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/IProfileUpdateRequest"
							}
						}
					}
				}
			}
		},
		"/api/profile/changePassword": {
			"post": {
				"operationId": "ChangePassword",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse"
								}
							}
						}
					}
				},
				"tags": [
					"Profile"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/IProfilePassword"
							}
						}
					}
				}
			}
		},
		"/api/profile/delete/{id}": {
			"delete": {
				"operationId": "DeleteProfile",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					}
				},
				"tags": [
					"Profile"
				],
				"security": [
					{
						"jwt": [
							"role:admin"
						]
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/api/auth/signUp": {
			"post": {
				"operationId": "SignUp",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/IProfileWithTokensDto"
								}
							}
						}
					}
				},
				"description": "Endpoint description",
				"summary": "Endpoint summary.",
				"tags": [
					"Authorization"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"description": "Body param",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ISignUpRequest",
								"description": "Body param"
							}
						}
					}
				}
			}
		},
		"/api/auth/signIn": {
			"post": {
				"operationId": "SignIn",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/IProfileWithTokensDto"
								}
							}
						}
					}
				},
				"tags": [
					"Authorization"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ISignInRequest"
							}
						}
					}
				}
			}
		},
		"/api/auth/requestResetPassword": {
			"post": {
				"operationId": "RequestResetPassword",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse"
								}
							}
						}
					}
				},
				"tags": [
					"Authorization"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/IProfileLogin"
							}
						}
					}
				}
			}
		},
		"/api/auth/resetPassword": {
			"post": {
				"operationId": "ResetPassword",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse"
								}
							}
						}
					}
				},
				"tags": [
					"Authorization"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/IProfileResetPasswordRequest"
							}
						}
					}
				}
			}
		},
		"/api/auth/refresh": {
			"post": {
				"operationId": "Refresh",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ITokensDto"
								}
							}
						}
					}
				},
				"tags": [
					"Authorization"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"refreshToken": {
										"type": "string"
									}
								},
								"required": [
									"refreshToken"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/api/file": {
			"get": {
				"operationId": "GetFileById",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/IFileDto"
								}
							}
						}
					}
				},
				"tags": [
					"Files"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"in": "query",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			},
			"post": {
				"operationId": "UploadFile",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/IFileDto"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"tags": [
					"Files"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"multipart/form-data": {
							"schema": {
								"type": "object",
								"properties": {
									"file": {
										"type": "string",
										"format": "binary"
									}
								},
								"required": [
									"file"
								]
							}
						}
					}
				}
			}
		},
		"/api/file/{id}": {
			"delete": {
				"operationId": "DeleteFile",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"type": "number",
									"format": "double"
								}
							}
						}
					}
				},
				"tags": [
					"Files"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/api/passkeys/generate-registration-options": {
			"post": {
				"operationId": "GenerateRegistrationOptions",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PublicKeyCredentialRequestOptionsJSON"
								}
							}
						}
					}
				},
				"tags": [
					"Passkeys"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"profileId": {
										"type": "string"
									}
								},
								"required": [
									"profileId"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/api/passkeys/verify-registration": {
			"post": {
				"operationId": "VerifyRegistration",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"verified": {
											"type": "boolean"
										}
									},
									"required": [
										"verified"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"tags": [
					"Passkeys"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/IVerifyRegistrationRequest"
							}
						}
					}
				}
			}
		},
		"/api/passkeys/generate-authentication-options": {
			"post": {
				"operationId": "GenerateAuthenticationOptions",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PublicKeyCredentialRequestOptionsJSON"
								}
							}
						}
					}
				},
				"tags": [
					"Passkeys"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"profileId": {
										"type": "string"
									}
								},
								"required": [
									"profileId"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/api/passkeys/verify-authentication": {
			"post": {
				"operationId": "VerifyAuthentication",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/IVerifyAuthenticationResponse"
								}
							}
						}
					}
				},
				"tags": [
					"Passkeys"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/IVerifyAuthenticationRequest"
							}
						}
					}
				}
			}
		}
	},
	"servers": [
		{
			"url": "http://localhost:8181",
			"description": "Local dev"
		}
	]
}